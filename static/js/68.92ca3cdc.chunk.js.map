{"version":3,"file":"static/js/68.92ca3cdc.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","components/Modals/ConfirmationModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","components/Pagination/Pagination.jsx","components/Modals/SuccessModal.jsx","hooks/Mass-Upload/useMEPMassupload.js","hooks/Mass-Upload/useRemoveDocConnection.js","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport \"./ConfirmationModal.css\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirm Submission\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Submit\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"confirmation-modal-content\">\r\n        <h4 className=\"confirmation-title\">\r\n          Are you sure you want to submit? This action cannot be undone.\r\n        </h4>\r\n\r\n        <ReusableAlert\r\n          variant=\"info\"\r\n          className=\"mb-3\"\r\n          message={\r\n            <span className=\"info-message-container\">\r\n              <span className=\"info-icon\">i</span>\r\n\r\n              <span className=\"info-text\">\r\n                Once submitted, your data will be processed by the system. You\r\n                will receive a confirmation once its complete. Large uploads may\r\n                take a few minutes.\r\n              </span>\r\n            </span>\r\n          }\r\n        />\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport CustomButton from \"../Button/Button\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const handleExportErrors = () => {\r\n    // Transform processedErrors into a format suitable for Excel\r\n    const exportData = processedErrors.map((error) => ({\r\n      \"Row Number\": error.rowNumber,\r\n      \"Column Names\": error.columns.join(\", \"),\r\n      \"Error Description\": error.errors.join(\"; \"),\r\n    }));\r\n\r\n    // Call the handleExportExcel function with the transformed data\r\n    handleExportExcel(exportData, \"validation-errors.xlsx\");\r\n  };\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <div className=\"error-header-container\">\r\n        <div></div>\r\n        <CustomButton\r\n          variant=\"success\"\r\n          onClick={handleExportErrors}\r\n          className=\"mb-3\"\r\n          text=\"Export to Excel\"\r\n          size=\"lg\"\r\n        />\r\n      </div>\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };\r\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled\r\n            ? \"Please select an operation first to Enable File uploading \"\r\n            : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n      5: \"Create/Update MEP\",\r\n      6: \"Remove Doc-Parts Relationships\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n        \r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\" Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n      console.log(\"allSheetData\", allSheetData);\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map((title) =>\r\n        title.toLowerCase()\r\n      );\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Special case for Physical Product Structure: Find Number and Quantity not mandatory for level 0 rows\r\n            if (\r\n              matchedOperation === \"Physical Product Structure\" &&\r\n              (field === \"Find Number\" || field === \"Quantity\") &&\r\n              row[\"Level\"] !== undefined &&\r\n              (row[\"Level\"] === 0 || row[\"Level\"] === \"0\")\r\n            ) {\r\n              // Skip validation for these fields on level 0 rows\r\n              return;\r\n            }\r\n\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined ||\r\n              row[field] === null ||\r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // New validation: For Operation 1 - Dimension is mandatory when type is Raw Material\r\n          if (matchedOperation === \"Physical Product\") {\r\n            const physicalProductType =\r\n              row[\"Physical Product/Raw Material\"]?.toString().trim() || \"\";\r\n            if (physicalProductType.toLowerCase() === \"raw material\") {\r\n              const dimension = row[\"Dimension\"]?.toString().trim() || \"\";\r\n              if (dimension === \"\") {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Dimension\" is required when  the column Name in the template \"Physical Product/Raw Material\" value is  \"Raw Material\"`\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace =\r\n              row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (\r\n              !userCollabSpace ||\r\n              !lowerCaseCollabSpaceTitles.includes(userCollabSpace)\r\n            ) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n          // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n          if (matchedOperation === \"Physical Product Structure\") {\r\n            columnName = \"Quantity\";\r\n            const quantityValue = row[columnName]?.toString().trim();\r\n            if (quantityValue) {\r\n              const numQuantity = Number(quantityValue);\r\n              if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                );\r\n                console.log(\r\n                  \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                  quantityValue\r\n                );\r\n              }\r\n            }\r\n          }\r\n          // NEW: Validate that for MEP, all mandatory fields are present\r\n          if (matchedOperation === \"Create/Update MEP\") {\r\n            console.log(\r\n              \"Mondatory fields validation for MEP\",\r\n              mandatoryAttributes\r\n            );\r\n            mandatoryAttributes.forEach((field) => {\r\n              if (\r\n                row[field] === undefined ||\r\n                row[field] === null ||\r\n                (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n              ) {\r\n                errorStats.mandatory++;\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"${field}\" is required but is empty`\r\n                );\r\n              }\r\n            });\r\n          }\r\n\r\n          // NEW: Validate that for MEP, all mandatory fields are present\r\n          if (matchedOperation === \"Remove Doc-Parts Relationships\") {\r\n            console.log(\r\n              \"Mondatory fields validation for MEP\",\r\n              mandatoryAttributes\r\n            );\r\n            mandatoryAttributes.forEach((field) => {\r\n              if (\r\n                row[field] === undefined ||\r\n                row[field] === null ||\r\n                (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n              ) {\r\n                errorStats.mandatory++;\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"${field}\" is required but is empty`\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\" Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  onChange,\r\n  size,\r\n  className,\r\n  disabled,\r\n  options,\r\n}) => {\r\n  const defaultLabel = options?.defaultLabel || \"Please select\";\r\n  const list = options?.list || [];\r\n\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n  // Check if we have grouped options (array of objects with label and options properties)\r\n  const hasGroupedOptions =\r\n    Array.isArray(list) &&\r\n    list.length > 0 &&\r\n    list[0] &&\r\n    \"label\" in list[0] &&\r\n    \"options\" in list[0];\r\n\r\n  // console.log(\"CustomSelect received options:\", {\r\n  //   list,\r\n  //   hasGroupedOptions,\r\n  //   selectedValue,\r\n  // });\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{defaultLabel}</option> {/* Default option */}\r\n      {hasGroupedOptions\r\n        ? // Render grouped options with optgroup\r\n          list.map((group, groupIndex) => (\r\n            <optgroup key={`group-${groupIndex}`} label={group.label}>\r\n              {Array.isArray(group.options) &&\r\n                group.options.map((item, optionIndex) => (\r\n                  <option\r\n                    key={`option-${groupIndex}-${optionIndex}`}\r\n                    value={item.value}\r\n                  >\r\n                    {item.label}\r\n                  </option>\r\n                ))}\r\n            </optgroup>\r\n          ))\r\n        : // Render flat list of options\r\n          list.map((item, idx) => (\r\n            <option key={`option-${idx}`} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n          // console.log(`Filtered options for column ${header}`, filteredOptions);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || \"--\"}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    // console.log(\r\n    //   `Checking if header '${header}' matches any NLS value:`,\r\n    //   hasMatch\r\n    // );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    // console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    // Check if current header has a matching NLS value or is mandatory\r\n    const currentHeaderHasNLS = hasMatchingNLS(currentColumnHeader);\r\n    const isCurrentHeaderMandatory =\r\n      mandatoryAttributes.includes(currentColumnHeader);\r\n    const shouldExcludeOwnLabel =\r\n      currentHeaderHasNLS || isCurrentHeaderMandatory;\r\n\r\n    // For debugging\r\n    // console.log(\r\n    //   `Column '${currentColumnHeader}': has NLS match=${currentHeaderHasNLS}, is mandatory=${isCurrentHeaderMandatory}, should exclude own label=${shouldExcludeOwnLabel}`\r\n    // );\r\n\r\n    // Get currently selected values to filter them out (from other columns)\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          // Basic filters first\r\n          const isEBOMAttribute = attr.group === \"EBOM Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return isEBOMAttribute && !isAlreadySelected && !shouldExclude;\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group with the same filtering logic\r\n      const partAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          const isNotEBOMAttribute = attr.group !== \"EBOM Attributes\";\r\n          const isNotSystemAttribute = attr.group !== \"System Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value - same as non-operation 2 logic\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return (\r\n            isNotEBOMAttribute &&\r\n            isNotSystemAttribute &&\r\n            !isAlreadySelected &&\r\n            !shouldExclude\r\n          );\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For operation 4, return only the 4 specific BOS Attributes\r\n    if (operationChoice === \"4\") {\r\n      // List of only the 4 attributes we want to show\r\n      const allowedBosAttributes = [\r\n        \"Print On Purchase Order Required\",\r\n        \"Print On Work Order Required\",\r\n        \"Work Order Document Required\",\r\n        \"Print On report Order Required\",\r\n      ];\r\n\r\n      // Return a flat array of only the 4 specific BOS Attributes\r\n      return dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group === \"BOS Attributes\" &&\r\n            allowedBosAttributes.includes(attr.uiLabel) &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n    }\r\n\r\n    // For other operations, return flat list with the same filtering logic\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => {\r\n        const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n        // Check if this attribute matches ANY NLS value\r\n        const matchesAnyNLS = allNLSValues.some(\r\n          (nls) =>\r\n            nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n        );\r\n\r\n        // Check if this attribute is in the mandatory list\r\n        const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n        // Only exclude if it matches an NLS value AND is mandatory\r\n        const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n        // For debugging\r\n        if (shouldExclude) {\r\n          // console.log(\r\n          //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n          // );\r\n        }\r\n\r\n        // Return true to keep items that are either NOT already selected OR don't meet exclusion criteria\r\n        return !isAlreadySelected && !shouldExclude;\r\n      })\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    // console.log(\r\n    //   \"Final filteredOptions for column:\",\r\n    //   currentColumnHeader,\r\n    //   filteredOptions\r\n    // );\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      // Special handling for operation 2 - disable system attributes even if not mandatory\r\n      let shouldBeDisabled = hasNLS && isMandatory;\r\n\r\n      if (operationChoice === \"2\" && hasNLS) {\r\n        // Check if this is a system attribute for operation 2\r\n        const isSystemAttribute = [\r\n          \"Description\",\r\n          \"EIN Number\",\r\n          \"Type\",\r\n          \"Title\",\r\n          \"Collaborative Space\",\r\n          \"Physical Product/Raw Material\",\r\n        ].some(\r\n          (attr) => header.toLowerCase().trim() === attr.toLowerCase().trim()\r\n        );\r\n\r\n        // For operation 2, disable if it's a system attribute regardless of mandatory status\r\n        if (isSystemAttribute) {\r\n          shouldBeDisabled = true;\r\n          // console.log(\r\n          //   `Operation 2: Disabling system attribute '${header}' regardless of mandatory status`\r\n          // );\r\n        }\r\n      }\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: shouldBeDisabled,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, don't include them in the mappings at all\r\n            // This will effectively exclude them from the payload\r\n            console.log(\r\n              `Skipping unmapped column without NLS match: ${columnName}`\r\n            );\r\n            // Don't add anything to simplifiedMappings or completeMappings\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(\r\n    initialOperationChoice\r\n  );\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Physical Product/Raw Material\",\r\n          nls: \"Physical Product/Raw Material\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name:\"dimensionType\",\r\n          nls: \"Dimension\",\r\n          groupNLS: \"System Attributes\",\r\n        }\r\n        \r\n      ];\r\n\r\n      const controlCenterAttributes = [\r\n        {\r\n          name: \"EMR_hasMBOM\", // Change from backendName to name\r\n          nls: \"Has MBOM\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n        {\r\n          name: \"EMR_Phase\", // Change from backendName to name\r\n          nls: \"Phase\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"name\",\r\n            nls: \"Reference Designator\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"quantity\",\r\n            nls: \"Quantity\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          // {\r\n          //   name: \"PartType\",\r\n          //   nls: \"PartType\",\r\n          //   group: \"EBOM Attributes\",\r\n          //   groupNLS: \"EBOM Attributes\",\r\n          // },\r\n        ];\r\n      }\r\n\r\n      // Define BOS attributes for Physical Product-Document operation (operation 4)\r\n      let bosAttributes = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosAttributes = [\r\n          {\r\n            name: \"Print On Purchase Order Required\",\r\n            nls: \"Print On Purchase Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On Work Order Required\",\r\n            nls: \"Print On Work Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Work Order Document Required\",\r\n            nls: \"Work Order Document Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On report Order Required\",\r\n            nls: \"Print On report Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Part Type\",\r\n            nls: \"Part Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n\r\n          {\r\n            name: \"Part Revision\",\r\n            nls: \"Part Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Type\",\r\n            nls: \"Document Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Name\",\r\n            nls: \"Document Name\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Revision\",\r\n            nls: \"Document Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Relationship Type\",\r\n            nls: \"Relationship Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (\r\n        effectiveOperation === \"2\" &&\r\n        !attributeGroups.includes(\"EBOM Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Add BOS Attributes group for operation 4\r\n      if (\r\n        effectiveOperation === \"4\" &&\r\n        !attributeGroups.includes(\"BOS Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"BOS Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n      // / Get NLS values from BOS attributes when operation is 4\r\n      let bosNlsValues = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosNlsValues = bosAttributes.map((item) => item.nls);\r\n        console.log(\"BOS NLS Values:\", bosNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [\r\n        ...new Set([\r\n          ...apiNlsValues,\r\n          ...systemNlsValues,\r\n          ...ebomNlsValues,\r\n          ...bosNlsValues,\r\n        ]),\r\n      ];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes,...controlCenterAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\r\n          \"Added EBOM attributes to merged attributes for operation 2\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n      if (effectiveOperation === \"4\") {\r\n        mergeAttributes = [...mergeAttributes, ...bosAttributes];\r\n        console.log(\r\n          \"Added BOS attributes to merged attributes for operation 4\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n\r\n      console.log(\"Final merged attributes including Control Center:\", mergeAttributes);\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          )\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name:\"File\",\r\n          nls: \"File\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        }\r\n\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        // console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        // console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst Pagination = ({\r\n  currentPage,\r\n  totalItems,\r\n  itemsPerPage,\r\n  onPageChange,\r\n}) => {\r\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n  if (totalPages <= 1) return null;\r\n\r\n  const start = (currentPage - 1) * itemsPerPage + 1;\r\n  const end = Math.min(currentPage * itemsPerPage, totalItems);\r\n\r\n  return (\r\n    <div className=\"pagination-footer\">\r\n      <div className=\"pagination-info\">\r\n        Showing {start}–{end} of {totalItems}\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button\r\n          disabled={currentPage === 1}\r\n          onClick={() => onPageChange(currentPage - 1)}\r\n        >\r\n          Prev\r\n        </button>\r\n        {Array.from({ length: totalPages }, (_, i) => (\r\n          <button\r\n            key={i}\r\n            className={currentPage === i + 1 ? \"active\" : \"\"}\r\n            onClick={() => onPageChange(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n        <button\r\n          disabled={currentPage === totalPages}\r\n          onClick={() => onPageChange(currentPage + 1)}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport CustomModal from \"../Modal/customModal\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"react-virtualized/styles.css\";\r\nimport \"./SuccessModal.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport { ResizableBox } from \"react-resizable\";\r\nimport \"react-resizable/css/styles.css\";\r\n\r\nconst SuccessModal = ({\r\n  show = false,\r\n  onHide = () => {},\r\n  responseData = [],\r\n}) => {\r\n  const itemsPerPage = 15;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [columnWidths, setColumnWidths] = useState({});\r\n  const [copiedCell, setCopiedCell] = useState(null); // Change to: {rowIndex: null, colIndex: null}\r\n\r\n  // Memoized CellMeasurer cache\r\n  const cache = useMemo(() => {\r\n    return new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    });\r\n  }, []);\r\n\r\n  // Preprocess response data to flatten nested arrays\r\n  const flattenedData = useMemo(() => {\r\n    // Function to flatten nested arrays\r\n    const flatten = (data) => {\r\n      if (!data || !Array.isArray(data)) return [];\r\n\r\n      // First, check if we have an array of arrays\r\n      const isNestedArray = data.some((item) => Array.isArray(item));\r\n\r\n      if (isNestedArray) {\r\n        // Flatten one level of arrays\r\n        return data.flatMap((item) => (Array.isArray(item) ? item : [item]));\r\n      }\r\n\r\n      return data;\r\n    };\r\n\r\n    return flatten(responseData);\r\n  }, [responseData]);\r\n\r\n  // Dynamically generate columns based on the flattened response data\r\n  const columns = useMemo(() => {\r\n    if (!flattenedData || flattenedData.length === 0) return [];\r\n\r\n    // Collect all unique keys from ALL items in the flattened data\r\n    const allKeys = new Set();\r\n    flattenedData.forEach((item) => {\r\n      if (typeof item === \"object\" && item !== null) {\r\n        Object.keys(item).forEach((key) => allKeys.add(key));\r\n      }\r\n    });\r\n\r\n    // Helper function to format header text\r\n\r\n    const formatHeaderText = (key) => {\r\n      // Replace underscores and hyphens with spaces\r\n      const spacedText = key.replace(/[_-]/g, \" \");\r\n\r\n      // Convert to title case (capitalize first letter of each word)\r\n      return spacedText\r\n        .split(\" \")\r\n        .map((word) =>\r\n          word === word.toUpperCase()\r\n            ? word // preserve acronyms like EIN, ID\r\n            : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n        )\r\n        .join(\" \");\r\n    };\r\n\r\n    // Convert keys to column definitions\r\n    return Array.from(allKeys).map((key) => {\r\n      let width = columnWidths[key] || 120;\r\n\r\n      // Set different widths based on the column content type\r\n      if (key.toLowerCase().includes(\"message\")) {\r\n        width = columnWidths[key] || 200; // Message columns are wider\r\n      } else if (key.toLowerCase().includes(\"status\")) {\r\n        width = columnWidths[key] || 100;\r\n      }\r\n\r\n      return {\r\n        key: key,\r\n        header: formatHeaderText(key), // Use the formatted header text\r\n        width: width,\r\n        tooltip: formatHeaderText(key), // Update tooltip too\r\n      };\r\n    });\r\n  }, [flattenedData, columnWidths]);\r\n\r\n  const handleResize = (key, newWidth) => {\r\n    setColumnWidths((prev) => ({ ...prev, [key]: newWidth }));\r\n  };\r\n\r\n  // Paginate response data\r\n  const paginatedData = useMemo(() => {\r\n    const start = (currentPage - 1) * itemsPerPage;\r\n    return flattenedData.slice(start, start + itemsPerPage);\r\n  }, [currentPage, flattenedData]);\r\n\r\n  const handleExport = () => {\r\n    handleExportExcel(flattenedData, \"upload-results.xlsx\");\r\n  };\r\n\r\n  console.log(\"SuccessModal received response data:\", responseData);\r\n  console.log(\"Generated columns:\", columns);\r\n\r\n  useEffect(() => {\r\n    cache.clearAll();\r\n  }, [paginatedData, cache]);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Safe getter function to handle case sensitivity and missing properties\r\n  const getItemValue = (item, key) => {\r\n    if (!item || typeof item !== \"object\") return \"-\";\r\n\r\n    // Direct match\r\n    if (item[key] !== undefined) return item[key];\r\n\r\n    // Case-insensitive match\r\n    const lowerKey = key.toLowerCase();\r\n    for (const k of Object.keys(item)) {\r\n      if (k.toLowerCase() === lowerKey) {\r\n        return item[k];\r\n      }\r\n    }\r\n\r\n    return \"-\";\r\n  };\r\n\r\n  // Function to copy a single cell value\r\n  const handleCopyCellValue = (value, rowIndex, colIndex, buttonElement) => {\r\n    if (!value || value === \"-\") return;\r\n\r\n    // Convert objects or arrays to JSON string before copying\r\n    const textToCopy =\r\n      typeof value === \"object\" ? JSON.stringify(value) : String(value);\r\n\r\n    navigator.clipboard\r\n      .writeText(textToCopy)\r\n      .then(() => {\r\n        // Add the copied class to the button itself\r\n        if (buttonElement) {\r\n          buttonElement.classList.add(\"copied\");\r\n\r\n          // Remove the class after 1.5 seconds\r\n          setTimeout(() => {\r\n            buttonElement.classList.remove(\"copied\");\r\n          }, 1000);\r\n        }\r\n\r\n        // We can keep this for tracking which cell was copied if needed\r\n        setCopiedCell({ rowIndex, colIndex });\r\n        setTimeout(() => setCopiedCell(null), 1500);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Failed to copy cell value:\", err);\r\n      });\r\n  };\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const item = paginatedData[index];\r\n    if (!item) return null;\r\n\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"virtualized-row\">\r\n          {columns.map((column, colIndex) => {\r\n            const value = getItemValue(item, column.key);\r\n\r\n            // Convert any object/array values to string for display\r\n            const displayValue =\r\n              typeof value === \"object\" && value !== null\r\n                ? JSON.stringify(value)\r\n                : String(value);\r\n\r\n            // Check if this specific cell position is copied\r\n            const isCopied =\r\n              copiedCell &&\r\n              copiedCell.rowIndex === index &&\r\n              copiedCell.colIndex === colIndex;\r\n\r\n            // Special handling for status field\r\n            if (column.key.toLowerCase().includes(\"status\")) {\r\n              const statusValue = String(value).toLowerCase();\r\n              const statusClass = statusValue.includes(\"success\")\r\n                ? \"success\"\r\n                : statusValue.includes(\"fail\") || statusValue.includes(\"error\")\r\n                ? \"failed\"\r\n                : \"\";\r\n\r\n              return (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`virtualized-cell status-cell ${statusClass} ${\r\n                    isCopied ? \"copied\" : \"\"\r\n                  }`}\r\n                  style={{ width: column.width, position: \"relative\" }}\r\n                  title={displayValue}\r\n                >\r\n                  {displayValue}\r\n                  <button\r\n                    className=\"cell-copy-button\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      // Pass the button element reference to the handler\r\n                      handleCopyCellValue(\r\n                        value,\r\n                        index,\r\n                        colIndex,\r\n                        e.currentTarget\r\n                      );\r\n                    }}\r\n                    aria-label=\"Copy cell value\"\r\n                    title=\"Copy to clipboard\"\r\n                  >\r\n                    {/* Copy icon (visible by default) */}\r\n                    <svg\r\n                      className=\"copy-icon\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <rect\r\n                        x=\"9\"\r\n                        y=\"9\"\r\n                        width=\"13\"\r\n                        height=\"13\"\r\n                        rx=\"2\"\r\n                        ry=\"2\"\r\n                      ></rect>\r\n                      <path d=\"M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1\"></path>\r\n                    </svg>\r\n\r\n                    {/* Checkmark icon (initially hidden) */}\r\n                    <svg\r\n                      className=\"copied-icon\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 6L9 17l-5-5\"></path>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            // Default handling for other fields\r\n            return (\r\n              <div\r\n                key={colIndex}\r\n                className={`virtualized-cell ${isCopied ? \"copied\" : \"\"}`}\r\n                style={{ width: column.width, position: \"relative\" }}\r\n                title={displayValue}\r\n              >\r\n                {displayValue}\r\n                <button\r\n                  className=\"cell-copy-button\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleCopyCellValue(value, index, colIndex);\r\n                  }}\r\n                  aria-label=\"Copy cell value\"\r\n                  title=\"Copy to clipboard\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"14\"\r\n                    height=\"14\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"2\"\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                  >\r\n                    <rect\r\n                      x=\"9\"\r\n                      y=\"9\"\r\n                      width=\"13\"\r\n                      height=\"13\"\r\n                      rx=\"2\"\r\n                      ry=\"2\"\r\n                    ></rect>\r\n                    <path d=\"M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1\"></path>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Upload Results\"\r\n      size=\"lg\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"success-modal-content\">\r\n        <div className=\"top-bar\">\r\n          <div></div>\r\n          <CustomButton\r\n            variant=\"success\"\r\n            size=\"lg\"\r\n            onClick={handleExport}\r\n            className=\"m-2 border-bottom-10px\"\r\n            text=\"Export to Excel \"\r\n          />\r\n        </div>\r\n\r\n        <ReusableAlert\r\n          variant=\"success\"\r\n          message={\r\n            <p className=\"success-message-text\">\r\n              ✅ <strong>Success:</strong> {flattenedData.length} item\r\n              {flattenedData.length > 1 ? \"s\" : \"\"} processed.\r\n            </p>\r\n          }\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {columns.length > 0 ? (\r\n          <>\r\n            <div className=\"virtualized-table-container\">\r\n              <div className=\"virtualized-header\" style={{ display: \"flex\" }}>\r\n                {columns.map((column, idx) => (\r\n                  <ResizableBox\r\n                    key={column.key}\r\n                    width={column.width}\r\n                    height={30}\r\n                    axis=\"x\"\r\n                    resizeHandles={[\"e\"]}\r\n                    handle={\r\n                      <span\r\n                        className=\"custom-resizer\"\r\n                        style={{\r\n                          cursor: \"col-resize\",\r\n                          width: 8,\r\n                          height: \"100%\",\r\n                          display: \"inline-block\",\r\n                          position: \"absolute\",\r\n                          right: 0,\r\n                          top: 0,\r\n                        }}\r\n                      />\r\n                    }\r\n                    onResizeStop={(e, data) =>\r\n                      handleResize(column.key, data.size.width)\r\n                    }\r\n                    minConstraints={[90, 30]}\r\n                    maxConstraints={[200, 30]}\r\n                  >\r\n                    <div\r\n                      className=\"virtualized-header-cell\"\r\n                      style={{\r\n                        width: column.width,\r\n                        minWidth: 90,\r\n                        maxWidth: 200,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        position: \"relative\",\r\n                        userSelect: \"none\",\r\n                        paddingRight: 8,\r\n                        boxSizing: \"border-box\",\r\n                      }}\r\n                      title={column.header}\r\n                    >\r\n                      {column.header}\r\n                    </div>\r\n                  </ResizableBox>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"virtualized-body\">\r\n                <AutoSizer>\r\n                  {({ height, width }) => (\r\n                    <List\r\n                      width={width}\r\n                      height={height - 10}\r\n                      rowCount={paginatedData.length}\r\n                      rowHeight={cache.rowHeight}\r\n                      deferredMeasurementCache={cache}\r\n                      rowRenderer={rowRenderer}\r\n                      overscanRowCount={5}\r\n                    />\r\n                  )}\r\n                </AutoSizer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Pagination Controls */}\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              totalItems={flattenedData.length}\r\n              itemsPerPage={itemsPerPage}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          <div className=\"no-data-message\">No response data available.</div>\r\n        )}\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default SuccessModal;\r\n","import { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport useToast from \"../useToast\";\r\nimport { useState } from \"react\";\r\n\r\nasync function chunkArray(array, size) {\r\n    const chunks = [];\r\n    for (let i = 0; i < array.length; i += size) {\r\n      chunks.push(array.slice(i, i + size));\r\n    }\r\n    return chunks;\r\n  }\r\nconst useMEPMassUpload = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  \r\n  const handleMEPMassupload = async (sheetData) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"useMEPMassUpload Headers\", headers);\r\n      console.log(\"useMEPMassUpload in SheetData\", sheetData);\r\n      console.log(\"ENOVIA_BASE_URL\", ENOVIA_BASE_URL);\r\n\r\n      if (!sheetData || sheetData.length === 0) {\r\n        showErrorToast(\"No data to upload. Please check your sheet.\");\r\n        return;\r\n      }\r\n\r\n      const chunkSize = 1000;\r\n      const chunks =\r\n        sheetData?.length > chunkSize\r\n          ? chunkArray(sheetData, chunkSize)\r\n          : [sheetData];\r\n        \r\n\r\n      console.log(\"Chunks:\", chunks);\r\n      // let searchedItems = [];\r\n      let createMEPItems = [];\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        const chunk = chunks[i];\r\n         console.log(`Processing chunk ${i + 1}/${chunks.length}`);\r\n        console.log(\"Chunk Data:\", chunk);\r\n        for (const row of chunk) {\r\n          try {\r\n            const response = await callEnoviaWebService(\r\n              \"GET\",\r\n              `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=${row?.Title}`,\r\n              \"\",\r\n              headers\r\n            );\r\n            if (response?.status === true && response?.output?.member?.length) {\r\n              const match = response.output.member.find(\r\n                (item) => item?.title === row?.Title\r\n              );\r\n              if (match) {\r\n                console.log(\"==================\", match);\r\n                if(match?.state !== 'RELEASED' || match?.state !== 'FROZEN') {\r\n                  let checkMepResponse = await ValidateMep(\r\n                    ENOVIA_BASE_URL,\r\n                    match?.title,\r\n                    headers\r\n                  );\r\n                  console.log(\"New APi Check Validation\", checkMepResponse);\r\n                  if (\r\n                    checkMepResponse.status &&\r\n                    checkMepResponse?.output?.member?.length > 0\r\n                  ) {\r\n                    let memberData = checkMepResponse?.output?.member[0];\r\n                    console.log(\"memberData =======\", memberData);\r\n                    if (memberData?.manufacturer) {\r\n                      // Update MEI Start\r\n                      const uploadBody = {\r\n                        partSource: row[\"Part Source\"] || \"\",\r\n                        partSourceURL: row[\"Part Source URL\"] || \"\",\r\n                        manufacturerPartNumber: String(\r\n                          row[\"Manufacturer Part Number\"] || \"\"\r\n                        ),\r\n                        cestamp: memberData?.cestamp,\r\n                      };\r\n                      console.log(\"Upload Body:\", uploadBody);\r\n                      try {\r\n                        console.log(\"match details in update api loop =======\", match);\r\n                        const response = await callEnoviaWebService(\r\n                          \"PATCH\",\r\n                          `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems/${match?.id}`,\r\n                          uploadBody,\r\n                          headers\r\n                        );\r\n                        if (response.status) {\r\n                          console.log(\"Update Item Response:\", response);\r\n                        } else {\r\n                          showErrorToast(response?.message || \"\");\r\n                        }\r\n                      } catch (error) {\r\n                        console.error(\r\n                          `Error creating item for row with Title ${row?.Title}:`,\r\n                          error\r\n                        );\r\n                        showErrorToast(\r\n                          `Error creating item for row with Title ${row?.Title}`\r\n                        );\r\n                      }                     \r\n                    }else{\r\n                       showErrorToast(\"It's not a Manufacturing Equalent Item\");\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else if (response?.output?.member?.length === 0) {\r\n              console.log(\"No match found for row\", row);\r\n              // createMEPItems.push(row);\r\n              const createBody = {\r\n                items: [\r\n                  {\r\n                    type: \"VPMReference\",\r\n                    attributes: {\r\n                      title: row?.Title || \"\",\r\n                      isManufacturable: true,\r\n                      description: row?.Description || \"\",\r\n                    },\r\n                  },\r\n                ],\r\n              };\r\n              try {\r\n                const response = await callEnoviaWebService(\r\n                  \"POST\",\r\n                  `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem`,\r\n                  createBody,\r\n                  headers\r\n                );\r\n                console.log(\"Create Item Response:\", response);\r\n                if (response.status && response.output?.member?.length) {\r\n                  const extensionBody = [\r\n                    {\r\n                      engItem: {\r\n                        source:\r\n                          \"https://oi000186152-us1-compass.3dexperience.3ds.com:443/enovia\",\r\n                        type: \"VPMReference\",\r\n                        identifier: response.output?.member[0]?.id,\r\n                        relativePath:\r\n                          \"/resource/v1/dseng/dseng:EngItem/\" +\r\n                          response.output?.member[0]?.id,\r\n                      },\r\n                      manufacturerCompany: {\r\n                        identifier: \"uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n                        relativePath:\r\n                          \"/3drdfpersist/resources/v1/modeler/dsvnp/dsvnp:SupplierCompany/uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n                        source:\r\n                          \"https://oi000186152-us1-3dnetwork.3dexperience.3ds.com:443\",\r\n                        type: \"SupplierCompany\",\r\n                      },\r\n                      manufacturerPartNumber: String(\r\n                        row[\"Manufacturer Part Number\"]\r\n                      ) || \"\",\r\n                      partSourceURL: row[\"Part Source URL\"] || \"\",\r\n                      partSource: row[\"Part Source\"] || \"\",\r\n                    },\r\n                  ];\r\n                  const extensionresponse = await callEnoviaWebService(\r\n                    \"POST\",\r\n                    `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems`,\r\n                    extensionBody,\r\n                    headers\r\n                  );\r\n                  console.log(\"Extension Item Response:\", extensionresponse);\r\n                  if (\r\n                    !(\r\n                      extensionresponse.status &&\r\n                      extensionresponse.output?.member?.length\r\n                    )\r\n                  ) {\r\n                    console.error(\r\n                      `Failed to create ManufacturerEquivalentItems for row ${i} with Title ${row?.Title}.`\r\n                    );\r\n                    showErrorToast(\r\n                      extensionresponse?.message ||\r\n                        \"Failed to create ManufacturerEquivalentItems.\"\r\n                    );\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                console.error(\r\n                  `Error creating item for row ${i} with Title ${row?.Title}:`,\r\n                  error\r\n                );\r\n                showErrorToast(\r\n                  `An error occurred while creating item for row ${i} with Title ${row?.Title}.`\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(\r\n              `Error processing row ${i} with Title ${row?.Title}:`,\r\n              error\r\n            );\r\n          }\r\n        }\r\n      }\r\n      // console.log(\"All matched items:\", searchedItems);\r\n      console.log(`Not Matched Items:`, createMEPItems);\r\n      // setCreateItems(createMEPItems);\r\n      // setUpdateItems(searchedItems);\r\n    } catch (error) {\r\n      console.error(\"MEP MASS UPLOAD Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching MEP Mass Upload data.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // const updateMassupload = async (createItems, updateItems, reset) => {\r\n  //   try {\r\n  //     setLoading(true);\r\n  //     const headers = await fetchCsrfToken();\r\n  //     if (!headers) {\r\n  //       showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n  //       return;\r\n  //     }\r\n\r\n  //     const { SecurityContext, ENO_CSRF_TOKEN } = headers;\r\n  //     const newHeaders = {\r\n  //       SecurityContext: \"VPLMProjectLeader.Company Name.Micro Motion\",\r\n  //       ENO_CSRF_TOKEN: ENO_CSRF_TOKEN,\r\n  //     };\r\n  //     let createFailed = false;\r\n  //     let updateFailed = false;\r\n  //     if (!updateItems || updateItems.length === 0) {\r\n  //       showErrorToast(\"No data to Update.\");\r\n  //       // return;\r\n  //     }\r\n  //     if (!createItems || createItems.length === 0) {\r\n  //       showErrorToast(\"No data to Create.\");\r\n  //       // return;\r\n  //     }\r\n  //     // ============ For Create MEP Mass Upload Update =================\r\n      // if (createItems?.length > 0) {\r\n      //   for (let i = 0; i < createItems.length; i++) {\r\n      //     const row = createItems[i];\r\n      //     const createBody = {\r\n      //       items: [\r\n      //         {\r\n      //           type: \"VPMReference\",\r\n      //           attributes: {\r\n      //             title: row?.Title,\r\n      //             isManufacturable: true,\r\n      //             description: row?.Description,\r\n      //           },\r\n      //         },\r\n      //       ],\r\n      //     };\r\n      //     try {\r\n      //       const response = await callEnoviaWebService(\r\n      //         \"POST\",\r\n      //         `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem`,\r\n      //         createBody,\r\n      //         newHeaders\r\n      //       );\r\n      //       console.log(\"Create Item Response:\", response);\r\n      //       if (response.status && response.output?.member?.length) {\r\n      //         const extensionBody = [\r\n      //           {\r\n      //             engItem: {\r\n      //               source:\r\n      //                 \"https://oi000186152-us1-compass.3dexperience.3ds.com:443/enovia\",\r\n      //               type: \"VPMReference\",\r\n      //               identifier: response.output?.member[0]?.id,\r\n      //               relativePath:\r\n      //                 \"/resource/v1/dseng/dseng:EngItem/\" +\r\n      //                 response.output?.member[0]?.id,\r\n      //             },\r\n      //             manufacturerCompany: {\r\n      //               identifier: \"uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n      //               relativePath:\r\n      //                 \"/3drdfpersist/resources/v1/modeler/dsvnp/dsvnp:SupplierCompany/uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n      //               source:\r\n      //                 \"https://oi000186152-us1-3dnetwork.3dexperience.3ds.com:443\",\r\n      //               type: \"SupplierCompany\",\r\n      //             },\r\n      //             manufacturerPartNumber: String(\r\n      //               row[\"Manufacturer Part Number\"]\r\n      //             ),\r\n      //             partSourceURL: row[\"Part Source URL\"],\r\n      //             partSource: row[\"Part Source\"],\r\n      //           },\r\n      //         ];\r\n      //         const extensionresponse = await callEnoviaWebService(\r\n      //           \"POST\",\r\n      //           `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems`,\r\n      //           extensionBody,\r\n      //           newHeaders\r\n      //         );\r\n      //         console.log(\"Extension Item Response:\", extensionresponse);\r\n      //         if (\r\n      //           !(\r\n      //             extensionresponse.status &&\r\n      //             extensionresponse.output?.member?.length\r\n      //           )\r\n      //         ) {\r\n      //           createFailed = true;\r\n      //           console.error(\r\n      //             `Failed to create ManufacturerEquivalentItems for row ${i} with Title ${row?.Title}.`\r\n      //           );\r\n      //           showErrorToast(\r\n      //             extensionresponse?.message ||\r\n      //               \"Failed to create ManufacturerEquivalentItems.\"\r\n      //           );\r\n      //         }\r\n      //       }\r\n      //     } catch (error) {\r\n      //       createFailed = true;\r\n      //       console.error(\r\n      //         `Error creating item for row ${i} with Title ${row?.Title}:`,\r\n      //         error\r\n      //       );\r\n      //       showErrorToast(\r\n      //         `An error occurred while creating item for row ${i} with Title ${row?.Title}.`\r\n      //       );\r\n      //     }\r\n      //   }\r\n      // }\r\n  //     if (updateItems?.length > 0) {\r\n  //       for (let i = 0; i < updateItems.length; i++) {\r\n  //         const row = updateItems[i];\r\n  //         const uploadBody = {\r\n  //           partSource: row?.row[\"Part Source\"],\r\n  //           partSourceURL: row?.row[\"Part Source URL\"],\r\n  //           manufacturerPartNumber: String(\r\n  //             row?.row[\"Manufacturer Part Number\"]\r\n  //           ),\r\n  //           cestamp: row?.cestamp,\r\n  //         };\r\n  //         console.log(\"Upload Body:\", uploadBody);\r\n  // try {\r\n  //   const response = await callEnoviaWebService(\r\n  //     \"PATCH\",\r\n  //     `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems/${row?.id}`,\r\n  //     uploadBody,\r\n  //     newHeaders\r\n  //   );\r\n  //   if (response.status) {\r\n  //     console.log(\"Update Item Response:\", response);\r\n  //   } else {\r\n  //     showErrorToast(response?.message || \"\");\r\n  //     updateFailed = true;\r\n  //   }\r\n\r\n  // } catch (error) {\r\n  //   updateFailed = true;\r\n  //   console.error(\r\n  //     `Error creating item for row ${i} with Title ${row?.row?.Title}:`,\r\n  //     error\r\n  //   );\r\n  //   showErrorToast(`Error creating item for row ${i} with Title ${row?.row?.Title}`);\r\n  // }\r\n  //       }\r\n  //     }\r\n  //     if (!createFailed && !updateFailed) {\r\n  //       showSuccessToast(\"MEP Mass Upload completed successfully.\");\r\n  //     }\r\n  //     // ============ For MEP Mass Upload Update =================\r\n  //   } catch (error) {\r\n  //     console.error(\"MEP MASS UPLOAD Error:\", error);\r\n  //     showErrorToast(\"An error occurred while fetching MEP Mass Upload data.\");\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  // return { handleMEPMassupload };\r\n  return {\r\n    // updateItems,\r\n    // createItems,\r\n    handleMEPMassupload,\r\n    loading,\r\n    // updateMassupload,\r\n  };\r\n};\r\n\r\nexport default useMEPMassUpload;\r\n\r\nasync function ValidateMep(ENOVIA_BASE_URL, searchStr, headers) {\r\n  // https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=SS_Rev02&$mask=dssrc:ManufacturerEquivalentItems.Basic\r\n  console.log(\"Validate Mep Function headers\", headers);\r\n  console.log(\"Validate Mep Function Search\",searchStr);\r\n  const response = await callEnoviaWebService(\r\n    \"GET\",\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=${searchStr}&$mask=dssrc:ManufacturerEquivalentItems.Basic`,\r\n    \"\",\r\n    headers\r\n  );\r\n  return response;\r\n}\r\n","import { useState } from \"react\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport useToast from \"../useToast\";\r\n\r\n// --------------------- Helper Functions -----------------------\r\n\r\n// const getAttachedDocumentIds = async (\r\n//   baseUrl,\r\n//   productId,\r\n//   headers,\r\n//   parentRelName,\r\n//   docName\r\n// ) => {\r\n//   try {\r\n//     const url = `${baseUrl}/resources/v1/modeler/documents/parentId/${productId}?parentRelName=${parentRelName}&tenant=OI000186152`;\r\n//     const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n//     if (response?.status && response?.output?.data?.length) {\r\n//       console.log(\"docName\", response?.output?.data)\r\n//       if(response?.output?.data?.length > 0 && docName) {\r\n//          response.output.data = response.output.data.filter((item) => {\r\n//           if(item?.dataelements?.name.toLowerCase().includes(docName.toLowerCase())){\r\n//             return item.id;\r\n//           } \r\n//         })\r\n//       }else{\r\n//         return response?.output?.data.map((item) => item.id);\r\n//       }\r\n//     }\r\n\r\n//     return [];\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching document IDs:\", error);\r\n//     return [];\r\n//   }\r\n// };\r\n// // Fetches document IDs based on product ID and document name\r\nconst getAttachedDocumentIds = async (\r\n  baseUrl,\r\n  productId,\r\n  headers,\r\n  parentRelName,\r\n  docName\r\n) => {\r\n  try {\r\n    const url = `${baseUrl}/resources/v1/modeler/documents/parentId/${productId}?parentRelName=${parentRelName}&tenant=OI000186152`;\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (response?.status && response?.output?.data?.length) {\r\n      console.log(\"docName\", docName);\r\n      console.log(\"docName\", response.output.data);\r\n      if (docName) {\r\n        const filteredData = response.output.data.filter(item =>\r\n          item?.dataelements?.name.toLowerCase().includes(docName.toLowerCase())\r\n        );\r\n        console.log(\"Filtered Data:\", filteredData);\r\n        return filteredData.map(item => item.id);\r\n      } else {\r\n        return response.output.data.map(item => item.id);\r\n      }\r\n    }\r\n\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching document IDs:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to build disconnect payload\r\nconst buildDisconnectPayload = (docIds, parentId, docType) => {\r\n  const data = docIds.map((id) => ({\r\n    id,\r\n    updateAction: \"NONE\",\r\n    relateddata: {\r\n      parents: [{ id: parentId, updateAction: \"DISCONNECT\" }],\r\n    },\r\n  }));\r\n  return { data, documentType: docType };\r\n};\r\n\r\n// Helper function to disconnect documents API\r\nconst disconnectDocuments = async (docs, headers, baseUrl, showErrorToast) => {\r\n  console.log(\"Disconnecting documents:\", docs);\r\n  const results = [];\r\n  for (const item of docs) {\r\n    const url = `${baseUrl}/resources/v1/modeler/documents?parentRelName=${item.documentType}&parentDirection=from&tenant=OI000186152`;\r\n    try {\r\n      const res = await callEnoviaWebService(\"POST\", url, item, headers);\r\n      console.log(`Disconnected ${item.documentType}`, res);\r\n    } catch (err) {\r\n      console.error(\"Error disconnecting documents:\", err);\r\n      showErrorToast(\"Failed to disconnect documents for\");\r\n      results.push(item);\r\n    }\r\n    return results;\r\n  }\r\n};\r\n\r\n// --------------------- Custom Hook -----------------------\r\n\r\nconst useRemoveDocConnection = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showWarningToast } = useToast();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  const handleDocDisconnectingMassupload = async (sheetData) => {\r\n    setLoading(true);\r\n    const specDocs = [];\r\n    const refDocs = [];\r\n    const nonExistingProducts = [];\r\n    const revisionNotMatch = [];\r\n    const notInWorkProducts = [];\r\n    const obsoleteProdcuts = [];\r\n    let disconnectPayload = [];\r\n\r\n    try {\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) return showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n\r\n      if (!sheetData?.length) {\r\n        showErrorToast(\"No data to upload. Please check your sheet.\");\r\n        return;\r\n      }\r\n      console.log(\"Sheet data\", sheetData);\r\n      // ================= sheetData Loop =================\r\n      for (const [index, row] of sheetData.entries()) {\r\n        try {\r\n          const searchStr = row[\"Item EIN\"];\r\n          const searchUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=%5Bds6wg%3AEnterpriseExtension.V_PartNumber%5D%3A%2A${searchStr}%2A`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            searchUrl,\r\n            \"\",\r\n            headers\r\n          );\r\n\r\n          const match = response?.output?.member?.find(\r\n            (item) => item?.revision === String(row[\"Item Revision\"])\r\n          );\r\n\r\n          if (!match) {\r\n            nonExistingProducts.push(row);\r\n            continue;\r\n          }\r\n\r\n          if (match.state !== \"IN_WORK\") {\r\n            notInWorkProducts.push({ ...match, row });\r\n            continue;\r\n          }\r\n\r\n          const docName = (row[\"Document Name\"] || \"\").trim();\r\n          let specIds = [];\r\n          let refIds = [];\r\n\r\n          if (match?.state === \"OBSOLETE\") {\r\n            // Push the match object into an array for obsolete matches\r\n            obsoleteProdcuts.push({ ...match, row });\r\n            continue;\r\n          } else {\r\n            specIds = await getAttachedDocumentIds(\r\n              ENOVIA_BASE_URL,\r\n              match?.id,\r\n              headers,\r\n              \"SpecificationDocument\",\r\n              docName\r\n            );\r\n            refIds = await getAttachedDocumentIds(\r\n              ENOVIA_BASE_URL,\r\n              match?.id,\r\n              headers,\r\n              \"Reference%20Document\",\r\n              docName\r\n            );\r\n          }\r\n\r\n          if (!specIds.length && !refIds.length) {\r\n            showWarningToast(\r\n              `No documents found for row ${index} with title ${row[\"Item EIN\"]}`\r\n            );\r\n            continue;\r\n          }\r\n\r\n          if (specIds.length) {\r\n            // If there are Specification documents, build the payload helper function\r\n            const payload = buildDisconnectPayload(\r\n              specIds,\r\n              match?.id,\r\n              \"SpecificationDocument\"\r\n            );\r\n            specDocs.push(payload);\r\n            // Call disconnectDocuments for SpecificationDocument API\r\n            const disconnectResults = await disconnectDocuments(\r\n              [payload],\r\n              headers,\r\n              ENOVIA_BASE_URL,\r\n              showErrorToast\r\n            );\r\n            disconnectPayload.push(...disconnectResults);\r\n          }\r\n\r\n          if (refIds.length) {\r\n            // If there are reference documents, build the payload helper function\r\n            const payload = buildDisconnectPayload(\r\n              refIds,\r\n              match?.id,\r\n              \"Reference%20Document\"\r\n            );\r\n            refDocs.push(payload);\r\n            // Call disconnectDocuments for reference documents API\r\n            const disconnectResults = await disconnectDocuments(\r\n              [payload],\r\n              headers,\r\n              ENOVIA_BASE_URL,\r\n              showErrorToast\r\n            );\r\n            disconnectPayload.push(...disconnectResults);\r\n          }\r\n        } catch (rowError) {\r\n          console.error(`Error processing row ${index}:`, rowError);\r\n        }\r\n      }\r\n\r\n      // ================= End of sheetData Loop =================\r\n      console.log(\"Specification Docs:\", specDocs);\r\n      console.log(\"Reference Docs:\", refDocs);\r\n      console.log(\"revisionNotMatch\", revisionNotMatch);\r\n      console.log(\"notInWorkProducts\", notInWorkProducts);\r\n      console.log(\"obsoleteProdcuts\", obsoleteProdcuts);\r\n      console.log(\"disconnectPayload \", disconnectPayload);\r\n      showSuccessToast(\"Disconnected Documents completed successfully.\");\r\n    } catch (mainError) {\r\n      console.error(\"Mass upload error:\", mainError);\r\n      showErrorToast(\"An error occurred while processing the mass upload.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return {\r\n    handleDocDisconnectingMassupload,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useRemoveDocConnection;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"./massupload.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport {\r\n  globalCollabSpaceTitles,\r\n  globalCollabSpaceNames,\r\n} from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\nimport SuccessModal from \"../../components/Modals/SuccessModal\";\r\nimport {\r\n  MSG_TEMPLATE_OPERATION_MISMATCH,\r\n  MSG_NO_DATA_TO_SUBMIT,\r\n  MSG_INVALID_OPERATION_TYPE,\r\n  MSG_UPLOAD_FAILED_CONTACT_ADMIN,\r\n  MSG_NO_SHEET_DATA,\r\n  MSG_UPLOAD_FAILED,\r\n  MSG_FILE_VALIDATED_SUCCESS,\r\n  MSG_WIDGET_RESET_SUCCESS,\r\n  MSG_UPLOAD_SUCCESS,\r\n  MSG_OPERATION_CHNAGED,\r\n} from \"../../utils/toastMessages\";\r\nimport { use } from \"react\";\r\nimport useMEPMassUpload from \"../../hooks/Mass-Upload/useMEPMassupload\";\r\nimport useRemoveDocConnection from \"../../hooks/Mass-Upload/useRemoveDocConnection\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadItems\",\r\n  2: \"/massUpload/uploadItemStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/connectItemDocuments\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData,\r\n  collabMapping // Add this parameter\r\n) => {\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) {\r\n          // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n          return;\r\n        }\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"classificationType\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (backendFieldName === \"File\") {\r\n          // Place File at root level\r\n          rootData[\"File\"] = value;\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          dataelements[attribute.backendName] = value;\r\n\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        // ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  }\r\n  // Add this as a new condition in transformSheetDataWithMappings after operation 3 but before the else branch\r\n  else if (operationType === \"4\") {\r\n    console.log(\"Processing Physical Product-Document data for operation 4\");\r\n\r\n    // Transform each row into the required format for connectItemDocuments\r\n    const connectItemDocuments = sheetData.map((row) => {\r\n      // Create base item structure\r\n      const item = {\r\n        PartType: \"\",\r\n        PartNumber: \"\",\r\n        PartRevision: \"\",\r\n        DocumentType: \"\",\r\n        DocumentName: \"\",\r\n        DocumentRevision: \"\",\r\n        RelationshipType: \"\",\r\n        BOSAttributes: {},\r\n      };\r\n      // Helper function to normalize field names for comparison\r\n      const normalizeFieldName = (name) => {\r\n        if (!name) return \"\";\r\n        return name.toLowerCase().replace(/\\s+/g, \"\");\r\n      };\r\n\r\n      // Root-level field mapping\r\n      const rootFieldMapping = {\r\n        parttype: \"PartType\",\r\n        part_type: \"PartType\",\r\n        einnumber: \"PartNumber\",\r\n        ein_number: \"PartNumber\",\r\n        partnumber: \"PartNumber\",\r\n        part_number: \"PartNumber\",\r\n        partrevision: \"PartRevision\",\r\n        part_revision: \"PartRevision\",\r\n        documenttype: \"DocumentType\",\r\n        document_type: \"DocumentType\",\r\n        documentname: \"DocumentName\",\r\n        document_name: \"DocumentName\",\r\n        documentrevision: \"DocumentRevision\",\r\n        document_revision: \"DocumentRevision\",\r\n        relationshiptype: \"RelationshipType\",\r\n        relationship_type: \"RelationshipType\",\r\n      };\r\n\r\n      // Map row data to item properties\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) return;\r\n        if (!columnMappings[columnName]) return;\r\n        if (value === undefined || value === null || value === \"\") return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === uiLabelBackendName ||\r\n            attr.backendName === uiLabelBackendName\r\n        );\r\n\r\n        const backendName = attribute?.backendName || uiLabelBackendName;\r\n        const group = attribute?.group;\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendName} (${group})`\r\n        );\r\n\r\n        // First check if it maps to a root-level field\r\n        const normalizedName = normalizeFieldName(backendName);\r\n        if (rootFieldMapping[normalizedName]) {\r\n          const fieldName = rootFieldMapping[normalizedName];\r\n          item[fieldName] = value;\r\n          console.log(`Mapped to root field: ${fieldName} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // Handle BOS attributes\r\n        const bosSpecialAttrs = [\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n        ];\r\n\r\n        // Check if it's a BOS attribute by name\r\n        if (\r\n          bosSpecialAttrs.some(\r\n            (attr) => normalizeFieldName(attr) === normalizedName\r\n          )\r\n        ) {\r\n          // Find the original name format\r\n          const originalAttr =\r\n            bosSpecialAttrs.find(\r\n              (attr) => normalizeFieldName(attr) === normalizedName\r\n            ) || backendName;\r\n\r\n          item.BOSAttributes[originalAttr] = value;\r\n          console.log(`Added BOS attribute: ${originalAttr} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // If it has BOS Attributes group, add it to BOSAttributes\r\n        if (group === \"BOS Attributes\") {\r\n          item.BOSAttributes[backendName] = value;\r\n          console.log(\r\n            `Added group-based BOS attribute: ${backendName} = \"${value}\"`\r\n          );\r\n          return;\r\n        }\r\n\r\n        // For anything else, try to find a match in root fields\r\n        for (const [rootKey, fieldName] of Object.entries(rootFieldMapping)) {\r\n          if (normalizedName.includes(rootKey.toLowerCase())) {\r\n            item[fieldName] = value;\r\n            console.log(\r\n              `Partial match to root field: ${fieldName} = \"${value}\"`\r\n            );\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Last resort - add to root level\r\n        console.log(\r\n          `Unmatched field added at root level: ${backendName} = \"${value}\"`\r\n        );\r\n        item[backendName] = value;\r\n      });\r\n\r\n      // Log the final item for debugging\r\n      console.log(\"Final processed item:\", JSON.stringify(item, null, 2));\r\n      return item;\r\n    });\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < connectItemDocuments.length; i += CHUNK_SIZE) {\r\n      chunks.push(connectItemDocuments.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    // Log a sample item for verification\r\n    if (connectItemDocuments.length > 0) {\r\n      console.log(\r\n        \"Sample connectItemDocument structure:\",\r\n        JSON.stringify(connectItemDocuments[0], null, 2)\r\n      );\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: connectItemDocuments.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isConnectItemDocumentsPayload: true,\r\n      connectItemDocuments: connectItemDocuments,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // Modify getPathForAttribute to handle EBOM Attributes for operation type 2\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      // Special handling for collabSpace in operation 2 - ADD THIS FIRST\r\n      if (operationType === \"2\" && backendName === \"collabSpace\") {\r\n        console.log(\"Operation 2: collabSpace explicitly placed at root level\");\r\n        return \"collabSpace\"; // Keep at root level\r\n      }\r\n\r\n      // Special case for level - always place at root level for operation type 2\r\n      if (operationType === \"2\" && backendName === \"Level\") {\r\n        console.log(\r\n          \"'Level' identified as EBOM Attribute but placing at root level\"\r\n        );\r\n        return \"Level\";\r\n      }\r\n\r\n      // Check for other EBOM Attributes for operation type 2\r\n      if (\r\n        operationType === \"2\" &&\r\n        attributeGroupMap[backendName] === \"EBOM Attributes\" &&\r\n        backendName !== \"Level\" // Make sure level doesn't go into instanceAttributes\r\n      ) {\r\n        console.log(\r\n          `${backendName} identified as EBOM Attribute, placing in instanceAttributes`\r\n        );\r\n        return `instanceAttributes.${backendName}`;\r\n      }\r\n\r\n      // Rest of existing code remains the same...\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n      // Add this special case for dimensionType\r\n      if (\r\n        operationType === \"1\" &&\r\n        (backendName === \"dimensionType\" || backendName === \"Dimension\")\r\n      ) {\r\n        console.log(\"Operation type 1: dimensionType placed inside attributes\");\r\n        return \"attributes.dimensionType\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabSpaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n          return \"collabSpaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      // For the physical product operation (in getPathForAttribute)\r\n      if (backendName === \"collabSpaceTitle\") {\r\n        console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n        return \"collabSpaceTitle\";\r\n      }\r\n\r\n      // Add a special case for collabspaceName if we need it in the payload\r\n      if (backendName === \"collabspaceName\") {\r\n        console.log(\"collabspaceName mapped to root\");\r\n        return \"collabSpace\";\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    // Define the constant for MBOM attributes group key\r\n    const MBOM_GROUP_KEY = \"MBOMAttributes__b0e36f7ffa8f4e42b8be46904dad3047\";\r\n\r\n    // Modify the existing transformation logic for operation type 2\r\n    if (operationType === \"2\") {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {\r\n          instanceAttributes: {\r\n            customerAttributes: {\r\n              [MBOM_GROUP_KEY]: {},\r\n            },\r\n          },\r\n        };\r\n\r\n        // Handle type first based on Physical Product/Raw Material column\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow.type = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"VPMReference\"; // Default to VPMReference\r\n        }\r\n\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) return;\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n          const attribute = mappedData.find(\r\n            (attr) =>\r\n              attr.uiLabel === uiLabelBackendName ||\r\n              attr.backendName === uiLabelBackendName\r\n          );\r\n          const backendName = attribute?.backendName || uiLabelBackendName;\r\n          const group = attribute?.group;\r\n\r\n          // Handle different types of attributes\r\n          if (backendName === \"Level\") {\r\n            // Level goes to root\r\n            transformedRow[\"level\"] = value;\r\n          } else if (backendName === \"collabSpaceTitle\") {\r\n            // Handle collabspace mapping\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n            }\r\n          } else if (backendName === \"classificationType\") {\r\n            transformedRow[\"classificationType\"] = value;\r\n          } else if (group === \"EBOM Attributes\") {\r\n            // Special handling for EBOM attributes\r\n            if (backendName === \"name\" || backendName === \"quantity\") {\r\n              // These go directly in instanceAttributes\r\n              transformedRow.instanceAttributes[backendName] = value;\r\n            } else {\r\n              // Other EBOM attributes go into the customerAttributes.MBOMAttributes group\r\n              transformedRow.instanceAttributes.customerAttributes[\r\n                MBOM_GROUP_KEY\r\n              ][backendName] = value;\r\n            }\r\n          } else if (backendName === \"title\" || backendName === \"description\") {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[backendName] = value;\r\n          }\r\n\r\n          // Add this new condition for dimensionType\r\n          else if (\r\n            backendName === \"dimensionType\" ||\r\n            backendName === \"Dimension\"\r\n          ) {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[\"dimensionType\"] = value;\r\n            console.log(\r\n              `Placed dimensionType directly in attributes: ${value}`\r\n            );\r\n          } else if (\r\n            columnName === \"EIN Number\" ||\r\n            backendName === \"Part Number\"\r\n          ) {\r\n            // Handle EIN Number/Part Number\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseng:EnterpriseReference\"]) {\r\n              transformedRow.attributes[\"dseng:EnterpriseReference\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseng:EnterpriseReference\"].partNumber =\r\n              value;\r\n          } else {\r\n            // Handle other enterprise attributes\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseno:EnterpriseAttributes\"]) {\r\n              transformedRow.attributes[\"dseno:EnterpriseAttributes\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseno:EnterpriseAttributes\"][\r\n              backendName\r\n            ] = value;\r\n          }\r\n        });\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      // Rest of your existing chunking logic...\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    } else {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {};\r\n\r\n        // Add instanceAttributes object for operation 2\r\n        if (operationType === \"2\") {\r\n          transformedRow.instanceAttributes = {};\r\n        }\r\n\r\n        // The rest of your existing transformation code...\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) {\r\n            // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n            return;\r\n          }\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n\r\n          const systemAttributeMappings = {\r\n            Title: \"title\",\r\n            Description: \"description\",\r\n            \"Collaborative Space\": \"collabSpaceTitle\",\r\n            \"Collab Space\": \"collabSpaceTitle\",\r\n            Type: \"type\",\r\n          };\r\n\r\n          const backendName =\r\n            systemAttributeMappings[uiLabelBackendName] ||\r\n            mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n              ?.backendName ||\r\n            uiLabelBackendName;\r\n\r\n          // **MOVE THIS CODE BLOCK UP HERE**\r\n          // Handle collabspace title and name mapping immediately\r\n          if (\r\n            (operationType === \"1\" || operationType === \"2\") &&\r\n            backendName === \"collabSpaceTitle\"\r\n          ) {\r\n            // Set the title as usual\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n\r\n            // Also set the collabspace name using the mapping\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n              console.log(\r\n                `Mapped collabspace title \"${value}\" to name \"${collabMapping[value]}\"`\r\n              );\r\n            } else {\r\n              console.warn(`No mapping found for collabspace title: ${value}`);\r\n            }\r\n            // Continue to the next attribute\r\n            return;\r\n          }\r\n\r\n          const path = getPathForAttribute(backendName, columnName);\r\n\r\n          if (\r\n            backendName === \"title\" ||\r\n            backendName === \"description\" ||\r\n            backendName.toLowerCase() === \"collabspace\"\r\n          ) {\r\n            console.log(`Placing ${backendName} at path: ${path}`);\r\n          }\r\n\r\n          if (!path) return;\r\n\r\n          const pathParts = path.split(\".\");\r\n          let current = transformedRow;\r\n\r\n          for (let i = 0; i < pathParts.length - 1; i++) {\r\n            const part = pathParts[i];\r\n            if (!current[part]) {\r\n              current[part] = {};\r\n            }\r\n            current = current[part];\r\n          }\r\n\r\n          current[pathParts[pathParts.length - 1]] = value;\r\n\r\n          // Special handling for collabspace in operation 2\r\n        });\r\n\r\n        if (operationType === \"1\") {\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Special handling for operation 2 default values\r\n        if (operationType === \"2\") {\r\n          // Set default type for Product Structure if not specified\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n\r\n          // Make sure instanceAttributes exists even if no EBOM attributes were found\r\n          if (!transformedRow.instanceAttributes) {\r\n            transformedRow.instanceAttributes = {};\r\n          }\r\n        }\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabSpaceTitle\",\r\n    \"Collab Space\": \"collabSpaceTitle\",\r\n    Type: \"classificationType\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    // Skip excluded columns\r\n    if (excludedColumns.includes(columnName)) {\r\n      console.log(`Column \"${columnName}\" is excluded from mapping`);\r\n      return;\r\n    }\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\n// Add this function near the top of your file, outside the MassUpload component\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showInfoToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n  const [collabNames, setCollabNames] = useState([]); // Add new state for names\r\n  const [collabMapping, setCollabMapping] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  // const handleOperationChange = (value) => {\r\n  //   console.log(\"Operation selected:\", value);\r\n  //   setOperationChoice(value);\r\n  //   handleRefreshForCurrentOperation(value);\r\n  // };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n\r\n    // If we already had a previous operation selected and files uploaded\r\n    if (operationChoice && formattedData) {\r\n      console.log(\"Operation changed - resetting uploaded file\");\r\n\r\n      // Reset file-related states\r\n      setErrors([]);\r\n      setColumnHeaders([]);\r\n      setMandatoryAttributes([]);\r\n      setFormattedData(null);\r\n\r\n      // Clear the file uploader\r\n      if (fileUploaderRef.current) {\r\n        fileUploaderRef.current.handleClearFiles(true); // Pass true to skip success toast\r\n      }\r\n\r\n      // Optional: Show toast informing the user\r\n      showInfoToast(MSG_OPERATION_CHNAGED);\r\n    }\r\n\r\n    // Update operation choice and refresh mapping\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  // Update the existing useEffect to handle collabspace names\r\n\r\n  // Update the existing useEffect to create the title-to-name mapping\r\n  useEffect(() => {\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceNames:\",\r\n      globalCollabSpaceNames\r\n    );\r\n\r\n    // Set titles and names arrays\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(globalCollabSpaceNames)) {\r\n      setCollabNames([...globalCollabSpaceNames]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx]  globalCollabSpaceNames is not an array!\",\r\n        globalCollabSpaceNames\r\n      );\r\n    }\r\n\r\n    console.log(\r\n      \"globalCollabSpaceTitles in UseEffect Block\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"globalCollabSpaceNames in UseEffect Block.\",\r\n      globalCollabSpaceNames\r\n    );\r\n    console.log(\"collabmapping in UseEffect Block\", collabMapping);\r\n\r\n    // Create a mapping object from titles to names\r\n    if (\r\n      Array.isArray(globalCollabSpaceTitles) &&\r\n      Array.isArray(globalCollabSpaceNames)\r\n    ) {\r\n      const mapping = {};\r\n\r\n      console.log(\r\n        \"globalCollabSpaceTitles in UseEffect Block\",\r\n        globalCollabSpaceTitles\r\n      );\r\n      console.log(\r\n        \"globalCollabSpaceNames in UseEffect Block.\",\r\n        globalCollabSpaceNames\r\n      );\r\n      console.log(\"collabmapping in UseEffect Block\", collabMapping);\r\n\r\n      for (let i = 0; i < globalCollabSpaceTitles.length; i++) {\r\n        mapping[globalCollabSpaceTitles[i]] = globalCollabSpaceNames[i];\r\n      }\r\n\r\n      setCollabMapping(mapping);\r\n      console.log(\r\n        \"[MassUpload.jsx] Collabspace title-to-name mapping:\",\r\n        mapping\r\n      );\r\n    }\r\n\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceNames:\", collabNames);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n        if (operationChoice !== \"5\" && operationChoice !== \"6\") {\r\n          await handleRefreshForCurrentOperation(operationChoice);\r\n          setTimeout(async () => {\r\n            console.log(\r\n              \"Applying automatic column mapping with:\",\r\n              mappedAttributes\r\n            );\r\n            console.log(\"operationChoice in  :\", operationChoice);\r\n            if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n              const { simplifiedMappings } = generateColumnMappings(\r\n                headers,\r\n                mandatoryAttributes,\r\n                mappedAttributes\r\n              );\r\n\r\n              console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n              if (Object.keys(simplifiedMappings).length > 0) {\r\n                const transformedData = transformSheetDataWithMappings(\r\n                  sheetData,\r\n                  simplifiedMappings,\r\n                  operationChoice,\r\n                  mappedAttributes,\r\n                  collabMapping // Add this parameter\r\n                );\r\n\r\n                setFormattedData(transformedData);\r\n                showSuccessToast(\r\n                  `Data automatically mapped with ${\r\n                    Object.keys(simplifiedMappings).length\r\n                  } columns`\r\n                );\r\n              }\r\n            }\r\n          }, 500);\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(MSG_FILE_VALIDATED_SUCCESS);\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(MSG_TEMPLATE_OPERATION_MISMATCH);\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n    }\r\n  };\r\n\r\n  // ================ disconnecting Docs from Physical prodcut\r\n  const { handleDocDisconnectingMassupload, loading: isDisconnectUploading } =\r\n    useRemoveDocConnection();\r\n  // ================ disconnecting Docs from Physical prodcut\r\n  // =============== MEP MAss Upload Related ===============\r\n  console.log(\"Formateed Dtaa\", formattedData);\r\n  const { handleMEPMassupload, loading: isUploading } = useMEPMassUpload();\r\n  const handleClick = useCallback(() => {\r\n    if (operationChoice === \"5\") {\r\n      console.log(\"formattedData\", formattedData);\r\n      if (formattedData) handleMEPMassupload(formattedData?.originalData);\r\n    } else if (operationChoice === \"6\") {\r\n      if (formattedData)\r\n        handleDocDisconnectingMassupload(formattedData?.originalData);\r\n      // handleDocumentsDisconnect(specificationDocument,referenceDocument)\r\n    } else {\r\n      setModalShow(true);\r\n    }\r\n  }, [\r\n    operationChoice,\r\n    // createItems,\r\n    // updateItems,\r\n    // updateMassupload,\r\n    handleReset,\r\n  ]);\r\n  // =============== MEP MAss Upload Related ===============\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled =\r\n    columnHeaders.length === 0 || errors.length > 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      // Close the confirmation modal immediately\r\n      setModalShow(false);\r\n      setIsSubmitting(true);\r\n\r\n      if (!formattedData) {\r\n        showErrorToast(MSG_NO_DATA_TO_SUBMIT);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(MSG_INVALID_OPERATION_TYPE);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n      let allResponses = [];\r\n      let hasErrors = false;\r\n\r\n      // For document payload (operation 3)\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          console.log(`Processing ${docChunks.length} document chunks`);\r\n\r\n          // Add user info if available (similar to other operations)\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            console.log(\r\n              `Sending document chunk ${i + 1} of ${docChunks.length}`\r\n            );\r\n\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            console.log(`Document chunk ${i + 1} response:`, response);\r\n\r\n            if (response.data) {\r\n              if (response.data.success === true) {\r\n                successCount++;\r\n                if (Array.isArray(response.data.responses)) {\r\n                  allResponses = [...allResponses, ...response.data.responses];\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\r\n                  `Document API returned success: false`,\r\n                  response.data\r\n                );\r\n              }\r\n            }\r\n\r\n            if (i % 5 === 0 || i === docChunks.length - 1) {\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${docChunks.length} document chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          hasErrors = true;\r\n          failureCount++;\r\n          console.error(\"Document upload failed:\", error);\r\n        }\r\n      } else {\r\n        // For operations 1, 2, and 4\r\n        // Create appropriate user info object based on operation type\r\n        const userInfo = {\r\n          // Include user information for operations 1 and 2\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.email\r\n            ? { email: userDetails.email }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.login\r\n            ? { userId: userDetails.login }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && securityContext\r\n            ? { securityContext: securityContext }\r\n            : {}),\r\n          // Add emailNotification flag only for operation 1\r\n          ...([\"1\", \"2\"].includes(operationChoice)\r\n            ? { emailNotification: false }\r\n            : {}),\r\n        };\r\n\r\n        // Check if this is a connectItemDocuments payload (operation 4)\r\n        const { isConnectItemDocumentsPayload, connectItemDocuments } =\r\n          formattedData;\r\n\r\n        if (operationChoice === \"4\" && isConnectItemDocumentsPayload) {\r\n          // User info for operation 4\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // Use connectItemDocuments as the key for the API payload\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                connectItemDocuments: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response for operation 4:`, response);\r\n\r\n              // Process response data (same as other operations)\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation 4 API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(`Chunk ${i + 1} failed for operation 4:`, error);\r\n            }\r\n          }\r\n        } else {\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // For operation 2, validate that instanceAttributes exist in each item\r\n              if (operationChoice === \"2\") {\r\n                chunk.forEach((item, idx) => {\r\n                  if (!item.instanceAttributes) {\r\n                    item.instanceAttributes = {};\r\n                  }\r\n                });\r\n              }\r\n\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                items: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response:`, response);\r\n\r\n              // Process response data\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation ${operationChoice} API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\"Empty response data received\");\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(\r\n                `Chunk ${i + 1} failed for operation ${operationChoice}:`,\r\n                error\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Show results\r\n      setApiResponse(allResponses);\r\n      console.log(\r\n        `Operation ${operationChoice} completed. All responses:`,\r\n        allResponses\r\n      );\r\n\r\n      if (!hasErrors && allResponses.length > 0) {\r\n        showSuccessToast(MSG_UPLOAD_SUCCESS);\r\n        setShowSuccessModal(true);\r\n      } else {\r\n        showErrorToast(MSG_UPLOAD_FAILED_CONTACT_ADMIN);\r\n        setShowSuccessModal(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`${MSG_UPLOAD_FAILED}${error.message || \"Unknown error\"}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n  console.log(\"operationChoice in Massupload\", operationChoice);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{\r\n            maxWidth: \"1200px\",\r\n            maxHeight: \"500px\",\r\n            minHeight: \"300px\",\r\n            minWidth: \"300px\",\r\n          }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\" gap={5}>\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                    { value: \"5\", label: \"Create/Update MEP\" },\r\n                    { value: \"6\", label: \"Remove Doc-Parts Relationships\" },\r\n                  ],\r\n                }}\r\n              />\r\n              {operationChoice === \"3\" && (\r\n                <Form.Group controlId=\"formFileMultiple\">\r\n                  <Form.Control\r\n                    type=\"file\"\r\n                    multiple\r\n                    // Attach the ref to the file input\r\n                  />\r\n                </Form.Group>\r\n              )}\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            {/* Add this where you want the loader to appear */}\r\n            {/* {isSubmitting && <Loader />} */}\r\n\r\n            {/* Loader for MEP handlings */}\r\n            {/* {isUploading && <Loader />}  */}\r\n            {/* Loading for Disconnecting Docs */}\r\n            {/* {isDisconnectUploading && <Loader />} */}\r\n            {/* Loader for submitting, uploading, or disconnecting */}\r\n\r\n            {(isSubmitting || isUploading || isDisconnectUploading) && (\r\n              <Loader />\r\n            )}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              {/* <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          /> */}\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n                {operationChoice === \"5\" || operationChoice === \"6\" ? null : (\r\n                  <CustomButton\r\n                    variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                    onClick={handleOpenSpreadsheetModal}\r\n                    text=\"Manage Spreadsheet Columns\"\r\n                    disabled={manageSpreadsheetDisabled}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={handleClick}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n      {operationChoice === \"5\" || operationChoice === \"6\" ? null : (\r\n        <ColumnMappingModal\r\n          show={showSpreadsheetModal}\r\n          onHide={() => setShowSpreadsheetModal(false)}\r\n          columnHeaders={columnHeaders}\r\n          mandatoryAttributes={mandatoryAttributes}\r\n          existingMappings={\r\n            formattedData?.mappings ? formattedData.mappings : {}\r\n          }\r\n          dropdownOptions={mappedAttributes?.dropdownOptions}\r\n          allNLSValues={mappedAttributes?.allNLSValues}\r\n          operationChoice={operationChoice}\r\n          onColumnsMapped={(mappings, finalMapping) => {\r\n            console.log(\"Column mappings received:\", mappings);\r\n\r\n            const columnMappings = mappings;\r\n\r\n            if (formattedData && formattedData.originalData) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                formattedData.originalData,\r\n                columnMappings,\r\n                operationChoice,\r\n                mappedAttributes,\r\n                collabMapping\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data mapped successfully with ${\r\n                  Object.keys(mappings).length\r\n                } columns`\r\n              );\r\n            } else {\r\n              showErrorToast(MSG_NO_SHEET_DATA);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <SuccessModal\r\n        show={showSuccessModal}\r\n        onHide={() => setShowSuccessModal(false)}\r\n        responseData={apiResponse || []}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"5\": // Manufacturing Equalent Product\r\n      url =\r\n        \"https://theWhiteChamaleon.github.io/mep_massupload/mep-template.xlsx\";\r\n      break;\r\n    case \"6\": // Disconnecting Docs from Physical Product\r\n      url =\r\n        \"https://theWhiteChamaleon.github.io/mep_massupload/remove-doc-connection-template.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n    \r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","size","type","disabled","onClick","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","src","alt","style","width","height","marginRight","Loader","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","onConfirm","CustomModal","ReusableAlert","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","i","err","CustomButton","handleExportErrors","exportData","handleExportExcel","_Fragment","length","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","console","log","ErrorPopup","useToast","showToast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","progress","otherOptions","toast","showSuccessToast","options","arguments","undefined","showErrorToast","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","headers","Array","isArray","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$PhysicalProduct","_row$Dimension","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","valueToValidate","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","defaultLabel","list","hasGroupedOptions","Form","Select","value","group","groupIndex","item","optionIndex","idx","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","hasMatchingNLS","warn","normalizedHeader","nls","StaticTable","hasNLS","isMandatory","shouldBeDisabled","attr","columnHeader","backendName","option","find","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","groupedOptions","ebomAttributes","isEBOMAttribute","isAlreadySelected","matchesAnyNLS","partAttributes","isNotEBOMAttribute","isNotSystemAttribute","allowedBosAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","systemAttributes","groupNLS","controlCenterAttributes","bosAttributes","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","bosNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","currentPage","totalItems","itemsPerPage","onPageChange","totalPages","ceil","start","end","min","from","responseData","setCurrentPage","columnWidths","setColumnWidths","copiedCell","setCopiedCell","flattenedData","flatMap","flatten","allKeys","add","formatHeaderText","replace","word","toUpperCase","charAt","tooltip","paginatedData","clearAll","handleCopyCellValue","colIndex","buttonElement","textToCopy","navigator","clipboard","writeText","then","classList","setTimeout","remove","catch","getItemValue","lowerKey","k","displayValue","isCopied","statusValue","statusClass","stopPropagation","currentTarget","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","d","handleExport","ResizableBox","axis","resizeHandles","handle","right","top","onResizeStop","handleResize","newWidth","minConstraints","maxConstraints","minWidth","maxWidth","justifyContent","userSelect","paddingRight","boxSizing","overscanRowCount","Pagination","newPage","useMEPMassUpload","loading","setLoading","handleMEPMassupload","array","chunkArray","createMEPItems","_response$output","_response$output$memb","_response$output2","_response$output2$mem","state","_checkMepResponse$out","_checkMepResponse$out2","checkMepResponse","ValidateMep","_checkMepResponse$out3","memberData","manufacturer","uploadBody","partSource","partSourceURL","manufacturerPartNumber","cestamp","createBody","items","isManufacturable","description","Description","_response$output3","_response$output3$mem","_response$output4","_response$output4$mem","_response$output5","_response$output5$mem","_extensionresponse$ou","_extensionresponse$ou2","extensionBody","engItem","source","identifier","relativePath","manufacturerCompany","extensionresponse","searchStr","getAttachedDocumentIds","baseUrl","productId","parentRelName","docName","_response$output$data","url","filteredData","_item$dataelements","dataelements","buildDisconnectPayload","docIds","parentId","docType","updateAction","relateddata","parents","documentType","disconnectDocuments","docs","res","useRemoveDocConnection","handleDocDisconnectingMassupload","specDocs","refDocs","nonExistingProducts","revisionNotMatch","notInWorkProducts","obsoleteProdcuts","disconnectPayload","searchUrl","revision","specIds","refIds","payload","disconnectResults","rowError","mainError","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","collabMapping","excludedColumns","documentItems","rootData","backendFieldName","attribute","collabspaceTitle","CHUNK_SIZE","totalChunks","originalData","mappings","isDocumentPayload","documents","connectItemDocuments","PartType","PartNumber","PartRevision","DocumentType","DocumentName","DocumentRevision","RelationshipType","BOSAttributes","normalizeFieldName","rootFieldMapping","parttype","part_type","einnumber","ein_number","partnumber","part_number","partrevision","part_revision","documenttype","document_type","documentname","document_name","documentrevision","document_revision","relationshiptype","relationship_type","uiLabelBackendName","normalizedName","fieldName","bosSpecialAttrs","originalAttr","rootKey","isConnectItemDocumentsPayload","attributeGroupMap","getPathForAttribute","MBOM_GROUP_KEY","transformedItems","transformedRow","instanceAttributes","customerAttributes","productTypeColumn","productType","partNumber","_ref4","_mappedData$find","Type","path","pathParts","part","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","collabNames","setCollabNames","setCollabMapping","isSubmitting","setIsSubmitting","apiResponse","setApiResponse","showSuccessModal","setShowSuccessModal","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","globalCollabSpaceNames","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","window","widget","getValue","securityContextValue","handleReset","selectElement","document","querySelector","MSG_WIDGET_RESET_SUCCESS","isDisconnectUploading","isUploading","handleClick","useCallback","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxHeight","Stack","gap","direction","MSG_OPERATION_CHNAGED","Group","controlId","Control","handleDownloadTemplate","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","transformedData","MSG_FILE_VALIDATED_SUCCESS","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","MSG_TEMPLATE_OPERATION_MISMATCH","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","MSG_NO_DATA_TO_SUBMIT","endpoint","MSG_INVALID_OPERATION_TYPE","successCount","failureCount","allResponses","hasErrors","docChunks","userInfo","email","login","userId","api","post","success","responses","emailNotification","MSG_UPLOAD_SUCCESS","MSG_UPLOAD_FAILED_CONTACT_ADMIN","MSG_UPLOAD_FAILED","ColumnMappingModal","MSG_NO_SHEET_DATA","SuccessModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","securityContext1","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader"],"sourceRoot":""}